var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://mdewcm2024.github.io/1a-ag8 \n 網誌: 請填入目前網站所在的 URL/blog,  https://mde.tw/cmsimde_site/blog \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲:  mdewcm2024/1a-ag8 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': '報告', 'text': '期中報告: 期末報告: \n', 'tags': '', 'url': '報告.html'}, {'title': '期中報告', 'text': '期中報告題目: Brython 程式應用 \n 簡報的pdf檔 \n 簡報的影片檔: \n \n 計算機的操作影片: \n \n', 'tags': '', 'url': '期中報告.html'}, {'title': '計算機', 'text': '\n 程式碼: \n <!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Brython Calculator</title>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3.9.5/brython.min.js"></script>\n    <style>\n        .calculator {\n            width: 300px;\n            background-color: #f2f2f2;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            padding: 10px;\n            margin: 20px auto;\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n        }\n\n        .calculator .output {\n            font-size: 24px;\n            text-align: right;\n            padding: 10px;\n            margin-bottom: 10px;\n            background-color: white;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        .calculator .buttons {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n        }\n\n        .calculator button {\n            font-size: 18px;\n            padding: 15px;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n            background-color: #e0e0e0;\n            transition: background-color 0.3s;\n        }\n\n        .calculator button:hover {\n            background-color: #ccc;\n        }\n\n        .calculator .function {\n            background-color: #66ccff;\n            color: white;\n        }\n\n        .calculator .function:hover {\n            background-color: #33bbff;\n        }\n\n        .calculator .equal {\n            background-color: #66ff66;\n            color: white;\n        }\n\n        .calculator .equal:hover {\n            background-color: #33ff33;\n        }\n\n        .calculator .clear {\n            background-color: #ff6666;\n            color: white;\n        }\n\n        .calculator .clear:hover {\n            background-color: #ff3333;\n        }\n    </style>\n</head>\n<body onload="brython()">\n    <div class="calculator">\n        <div class="output" id="output">0</div>\n        <div class="buttons">\n            <button class="function" onclick="memory_clear()">MC</button>\n            <button class="function" onclick="memory_add()">M+</button>\n            <button class="function" onclick="memory_subtract()">M-</button>\n            <button class="clear" onclick="clear_output()">C</button>\n            <button onclick="append_to_output(\'7\')">7</button>\n            <button onclick="append_to_output(\'8\')">8</button>\n            <button onclick="append_to_output(\'9\')">9</button>\n            <button class="function" onclick="append_to_output(\'*\')">*</button>\n            <button onclick="append_to_output(\'4\')">4</button>\n            <button onclick="append_to_output(\'5\')">5</button>\n            <button onclick="append_to_output(\'6\')">6</button>\n            <button class="function" onclick="append_to_output(\'+\')">+</button>\n            <button onclick="append_to_output(\'1\')">1</button>\n            <button onclick="append_to_output(\'2\')">2</button>\n            <button onclick="append_to_output(\'3\')">3</button>\n            <button class="function" onclick="append_to_output(\'-\')">-</button>\n            <button onclick="append_to_output(\'0\')">0</button>\n            <button onclick="append_to_output(\'.\')">.</button>\n            <button class="equal" onclick="calculate_result()">=</button>\n            <button class="function" onclick="append_to_output(\'/\')">/</button>\n        </div>\n    </div>\n    <script type="text/python">\n        from browser import document, window\n\n        output = document[\'output\']\n        memory = 0\n        current_operation = \'\'\n        last_value = \'\'\n\n        def append_to_output(value):\n            if output.text == \'0\' or output.text == "Error":\n                output.text = value\n            else:\n                output.text += value\n\n        def clear_output():\n            global current_operation, last_value\n            output.text = \'0\'\n            current_operation = \'\'\n            last_value = \'\'\n\n        def memory_clear():\n            global memory\n            memory = 0\n\n        def memory_add():\n            global memory\n            memory += float(output.text)\n            clear_output()\n\n        def memory_subtract():\n            global memory\n            memory -= float(output.text)\n            clear_output()\n\n        def calculate_result():\n            global current_operation, last_value\n            try:\n                result = eval(output.text)\n                output.text = str(result)\n                last_value = output.text\n                current_operation = \'\'\n            except Exception as e:\n                output.text = "Error"\n                last_value = \'\'\n                current_operation = \'\'\n\n        # Export functions to be available from JavaScript\n        window.append_to_output = append_to_output\n        window.clear_output = clear_output\n        window.memory_clear = memory_clear\n        window.memory_add = memory_add\n        window.memory_subtract = memory_subtract\n        window.calculate_result = calculate_result\n    </script>\n</body>\n</html>\n \n', 'tags': '', 'url': '計算機.html'}, {'title': '期末報告', 'text': '簡報的pdf檔 \n 簡報的影片檔: \n \n', 'tags': '', 'url': '期末報告.html'}, {'title': '五子棋遊戲', 'text': '\n 程式碼: \n <!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>遊戲選項</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: flex-start;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n            padding: 20px;\n        }\n        h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n        }\n        .menu-item {\n            font-size: 1.5em;\n            margin: 10px;\n            cursor: pointer;\n            padding: 10px 20px;\n            border: 2px solid #000;\n            background-color: #fff;\n            text-align: center;\n            width: 200px;\n            text-decoration: none;\n            color: #000;\n        }\n        .menu-item:hover {\n            background-color: #ddd;\n        }\n    </style>\n</head>\n<body>\n    <h1>遊戲選項</h1>\n    <a class="menu-item" href="members.html">成員名單</a>\n    <a class="menu-item" href="purpose.html">製作目的與目標</a>\n    <a class="menu-item" href="game-options.html">遊戲選擇</a>\n</body>\n</html>\n \n \n', 'tags': '', 'url': '五子棋遊戲.html'}, {'title': '成員名單', 'text': '\n 程式碼: \n <!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>成員名單</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n        }\n        p {\n            font-size: 1.5em;\n        }\n        .back-button {\n            margin-top: 20px;\n            padding: 10px 20px;\n            font-size: 1em;\n            border: 2px solid #000;\n            background-color: #fff;\n            cursor: pointer;\n            text-decoration: none;\n            color: #000;\n        }\n        .back-button:hover {\n            background-color: #ddd;\n        }\n    </style>\n</head>\n<body>\n    <h1>成員名單</h1>\n    <p>第八組</p>\n    40823114、40823124<br>\n    40823238、41223129<br>\n    41046109、41046137<br>\n    \n    \n    <a class="back-button" href="index.html">返回主菜單</a>\n</body>\n</html>\n \n \n', 'tags': '', 'url': '成員名單.html'}, {'title': '製作目的與目標', 'text': '\n 程式碼: \n <!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>製作目的與目標</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            font-size: 3em;\n            margin-bottom: 20px;\n        }\n        p {\n            font-size: 1.5em;\n        }\n        .back-button {\n            margin-top: 20px;\n            padding: 10px 20px;\n            font-size: 1em;\n            border: 2px solid #000;\n            background-color: #fff;\n            cursor: pointer;\n            text-decoration: none;\n            color: #000;\n        }\n        .back-button:hover {\n            background-color: #ddd;\n        }\n    </style>\n</head>\n<body>\n    <h1>製作目的與目標</h1>\n    <p>課堂作業</p>\n    為了期末報告而做出五子棋這個小遊戲。<br>\n    可以讓我們更清楚及了解機械系生產產品時會有的問題。<br> \n    <a class="back-button" href="index.html">返回主菜單</a>\n</body>\n</html>\n \n \n', 'tags': '', 'url': '製作目的與目標.html'}, {'title': '遊戲畫面', 'text': '\n 程式碼: \n <!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>五子棋遊戲</title>\n    <style>\n        body {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        #container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            position: relative;\n        }\n        #board {\n            display: grid;\n            grid-template-columns: repeat(15, 30px);\n            grid-template-rows: repeat(15, 30px);\n            gap: 0;\n            border: 4px solid black;\n            background-color: #ffdead;\n            position: relative;\n        }\n        .cell {\n            width: 30px;\n            height: 30px;\n            position: relative;\n        }\n        .line {\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n            border: 1px solid black;\n        }\n        .piece {\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n        }\n        .player {\n            background-color: blue;\n        }\n        .ai {\n            background-color: red;\n        }\n        .scoreboard {\n            position: absolute;\n            top: -40px;\n            display: flex;\n            justify-content: space-between;\n            width: calc(100% + 40px);\n            left: -20px;\n        }\n        .score {\n            font-size: 18px;\n            margin: 0 20px;\n        }\n        @media (max-width: 600px) {\n            .cell {\n                width: 20px;\n                height: 20px;\n            }\n            .piece {\n                width: 15px;\n                height: 15px;\n            }\n            #board {\n                grid-template-columns: repeat(15, 20px);\n                grid-template-rows: repeat(15, 20px);\n            }\n        }\n        #backButton {\n            position: absolute;\n            top: 20px;\n            left: 20px;\n            padding: 10px;\n            font-size: 1em;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>五子棋遊戲</h1>\n    <div id="container">\n        <button id="backButton" onclick="goBack()">返回選單</button>\n        <div class="scoreboard">\n            <p class="score">玩家得分: <span id="playerScore">0</span></p>\n            <p class="score">對手得分: <span id="aiScore">0</span></p>\n        </div>\n        <div id="board"></div>\n    </div>\n    <button onclick="resetGame()">重置遊戲</button>\n\n    <script>\n        const board = document.getElementById(\'board\');\n        const playerScoreElem = document.getElementById(\'playerScore\');\n        const aiScoreElem = document.getElementById(\'aiScore\');\n\n        let boardState = Array(15).fill().map(() => Array(15).fill(0));\n        let playerScore = 0;\n        let aiScore = 0;\n\n        function createBoard() {\n            board.innerHTML = \'\';\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    const cell = document.createElement(\'div\');\n                    cell.classList.add(\'cell\');\n                    const line = document.createElement(\'div\');\n                    line.classList.add(\'line\');\n                    cell.appendChild(line);\n                    cell.dataset.x = x;\n                    cell.dataset.y = y;\n                    cell.addEventListener(\'click\', playerMove);\n                    board.appendChild(cell);\n                }\n            }\n        }\n\n        function playerMove(event) {\n            const x = parseInt(event.target.parentElement.dataset.x);\n            const y = parseInt(event.target.parentElement.dataset.y);\n            if (boardState[y][x] === 0) {\n                boardState[y][x] = 1;\n                event.target.parentElement.appendChild(createPiece(\'player\'));\n                if (checkWinner(1)) {\n                    alert(\'玩家獲勝！\');\n                    playerScore++;\n                    updateScores();\n                    resetGame();\n                    return;\n                }\n                setTimeout(aiMove, 500);\n            }\n        }\n\n        function aiMove() {\n            let move = findWinningMove(2) || findWinningMove(1) || findPotentialThreat(2) || findPotentialThreat(1) || findRandomMove();\n            if (move) {\n                boardState[move.y][move.x] = 2;\n                const cell = board.querySelector(`[data-x=\'${move.x}\'][data-y=\'${move.y}\']`);\n                cell.appendChild(createPiece(\'ai\'));\n                if (checkWinner(2)) {\n                    alert(\'對手獲勝！\');\n                    aiScore++;\n                    updateScores();\n                    resetGame();\n                    return;\n                }\n            }\n        }\n\n        function findWinningMove(player) {\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    if (boardState[y][x] === 0) {\n                        boardState[y][x] = player;\n                        if (checkWinner(player)) {\n                            boardState[y][x] = 0;\n                            return { x, y };\n                        }\n                        boardState[y][x] = 0;\n                    }\n                }\n            }\n            return null;\n        }\n\n        function findPotentialThreat(player) {\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    if (boardState[y][x] === 0) {\n                        boardState[y][x] = player;\n                        if (checkPotentialThreat(player)) {\n                            boardState[y][x] = 0;\n                            return { x, y };\n                        }\n                        boardState[y][x] = 0;\n                    }\n                }\n            }\n            return null;\n        }\n\n        function checkPotentialThreat(player) {\n            const directions = [\n                { dx: 1, dy: 0 },\n                { dx: 0, dy: 1 },\n                { dx: 1, dy: 1 },\n                { dx: 1, dy: -1 }\n            ];\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    if (boardState[y][x] === player) {\n                        for (let { dx, dy } of directions) {\n                            if (checkThreatDirection(x, y, dx, dy, player)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        function checkThreatDirection(x, y, dx, dy, player) {\n            let count = 0;\n            for (let i = 0; i < 5; i++) {\n                const nx = x + i * dx;\n                const ny = y + i * dy;\n                if (nx >= 0 && nx < 15 && ny >= 0 && ny < 15 && boardState[ny][nx] === player) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            return count >= 3; // Consider a position a threat if there are 3 in a row\n        }\n\n        function findRandomMove() {\n            let moves = [];\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    if (boardState[y][x] === 0) {\n                        moves.push({ x, y });\n                    }\n                }\n            }\n            return moves.length ? moves[Math.floor(Math.random() * moves.length)] : null;\n        }\n\n        function createPiece(playerClass) {\n            const piece = document.createElement(\'div\');\n            piece.classList.add(\'piece\', playerClass);\n            return piece;\n        }\n\n        function checkWinner(player) {\n            const directions = [\n                { dx: 1, dy: 0 },\n                { dx: 0, dy: 1 },\n                { dx: 1, dy: 1 },\n                { dx: 1, dy: -1 }\n            ];\n            for (let y = 0; y < 15; y++) {\n                for (let x = 0; x < 15; x++) {\n                    if (boardState[y][x] === player) {\n                        for (let { dx, dy } of directions) {\n                            if (checkDirection(x, y, dx, dy, player)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        function checkDirection(x, y, dx, dy, player) {\n            let count = 0;\n            for (let i = 0; i < 5; i++) {\n                const nx = x + i * dx;\n                const ny = y + i * dy;\n                if (nx >= 0 && nx < 15 && ny >= 0 && ny < 15 && boardState[ny][nx] === player) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            return count === 5;\n        }\n\n        function updateScores() {\n            playerScoreElem.textContent = playerScore;\n            aiScoreElem.textContent = aiScore;\n        }\n\n        function resetGame() {\n            boardState = Array(15).fill().map(() => Array(15).fill(0));\n            createBoard();\n        }\n\n        function goBack() {\n            window.location.href = \'index.html\';\n        }\n\n        createBoard();\n    </script>\n</body>\n</html>\n \n \n', 'tags': '', 'url': '遊戲畫面.html'}, {'title': 'cmsimde', 'text': '', 'tags': '', 'url': 'cmsimde.html'}, {'title': '分組專案', 'text': '', 'tags': '', 'url': '分組專案.html'}, {'title': '分組專案簡介', 'text': "請參照Blog上內容進行操作 \n SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': '分組專案簡介.html'}, {'title': 'Replit', 'text': '若要改版，必須確定 home/runner/.ssh 目錄下有 id_rsa 與config \n 若要Replit 維護分組網站內容，必須要動態設定，.ssh下的 id_rsa與 config \n https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'w10', 'text': '建立一個包含以下程式的gist \n 並且取出其URL:  gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py \n 接著到Brython頁面的網址後加 ?src=URL \n 就可在 頁面 中運行程式 \n from browser import window, ajax\n  \ndef fetch_csv_data():\n  # CSV 檔案網址\n  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"\n  \n  def on_complete(req):\n    if req.status == 200 or req.status == 0:\n      # 讀取 CSV 檔案內容\n      content = req.text\n  \n      # 依照換行符號拆分資料\n      lines = content.split(\'\\n\')\n  \n      # 建立空列表儲存資料\n      data = []\n  \n      # 遍歷每一行資料\n      for line in lines:\n        # 忽略空白行\n        if line.strip() == "":\n          continue\n  \n        # 依照逗號拆分資料\n        items = line.split(\',\')\n  \n        # 將拆分後的資料加入列表\n        data.append(items)\n  \n      # 印出結果\n      print(data)\n    else:\n      print("Error:", req.text)\n  \n  # 發送 AJAX 請求\n  req = ajax.ajax()\n  req.bind(\'complete\', on_complete)\n  req.open(\'GET\', url, True)\n  req.set_header(\'content-type\', \'application/x-www-form-urlencoded\')\n  req.send()\n  \n# 呼叫函式讀取 CSV 資料\nfetch_csv_data() \n', 'tags': '', 'url': 'w10.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'git', 'text': '', 'tags': '', 'url': 'git.html'}, {'title': '分支和合併的基本用法', 'text': '\n 讓我們來看一個你在現實生活中，有可能會用到的分支（branch）與合併（merge）工作流程的簡單範例， 你做了以下動作： \n \n \n \n \n 開發一個網站。 \n \n \n 建立一個分支以實現一個新故事。 \n \n \n 在這個分支上進行開發。 \n \n \n \n \n 此時你接到一個電話，有個很危急的問題需要緊急修正（hotfix）， 你可以按照下面的方式處理： \n \n \n \n \n 切換到發佈產品用的分支。 \n \n \n 在同一個提交上建立一個新分支，在這個分支上修正問題。 \n \n \n 通過測試後，切回發佈產品用的分支，將修正用的分支合併進來，然後再推送（push）出去以發佈產品。 \n \n \n 切換到之前實現新需求的分支以繼續工作。 \n \n \n', 'tags': '', 'url': '分支和合併的基本用法.html'}]};