<h1>About</h1>
<p>網頁: <a href="https://mdewcm2024.github.io/1a-ag8">https://mdewcm2024.github.io/1a-ag8</a></p>
<p>網誌: 請填入目前網站所在的 URL/blog, <a href="https://mde.tw/cmsimde_site/blog">https://mde.tw/cmsimde_site/blog</a></p>
<p>簡報: 請填入目前網站所在的 URL/reveal, <a href="https://mde.tw/cmsimde_site/reveal">https://mde.tw/cmsimde_site/reveal</a></p>
<p>倉儲: <a href="https://github.com/mdewcm2024/1a-ag8">mdewcm2024/1a-ag8</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>報告</h1>
<p>期中報告:<br/>期末報告:</p>
<h2>期中報告</h2>
<p>期中報告題目: Brython 程式應用</p>
<p><a href="https://41046109.github.io/wcm2024/downloads/%E6%9C%9F%E4%B8%AD%E5%A0%B1%E5%91%8A.pdf">簡報的pdf檔</a></p>
<p>簡報的影片檔:</p>
<p><iframe allowfullscreen="allowfullscreen" frameborder="2" height="315" src="https://www.youtube.com/embed/uTmsGUi9BqE?si=GFXieUcODyIThIlu" width="560"></iframe></p>
<p><span>計算機的操作影片:</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OIfJGleloSE?si=JJv3LrkHkWg3tLRx" title="YouTube video player" width="560"></iframe></p>
<h2>計算機</h2>
<p><img alt="" height="350" src="/images/計算機.png" width="316"/></p>
<p>程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Brython Calculator&lt;/title&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3.9.5/brython.min.js"&gt;&lt;/script&gt;
    &lt;style&gt;
        .calculator {
            width: 300px;
            background-color: #f2f2f2;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin: 20px auto;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        .calculator .output {
            font-size: 24px;
            text-align: right;
            padding: 10px;
            margin-bottom: 10px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        .calculator .buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
        }

        .calculator button {
            font-size: 18px;
            padding: 15px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            background-color: #e0e0e0;
            transition: background-color 0.3s;
        }

        .calculator button:hover {
            background-color: #ccc;
        }

        .calculator .function {
            background-color: #66ccff;
            color: white;
        }

        .calculator .function:hover {
            background-color: #33bbff;
        }

        .calculator .equal {
            background-color: #66ff66;
            color: white;
        }

        .calculator .equal:hover {
            background-color: #33ff33;
        }

        .calculator .clear {
            background-color: #ff6666;
            color: white;
        }

        .calculator .clear:hover {
            background-color: #ff3333;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;
    &lt;div class="calculator"&gt;
        &lt;div class="output" id="output"&gt;0&lt;/div&gt;
        &lt;div class="buttons"&gt;
            &lt;button class="function" onclick="memory_clear()"&gt;MC&lt;/button&gt;
            &lt;button class="function" onclick="memory_add()"&gt;M+&lt;/button&gt;
            &lt;button class="function" onclick="memory_subtract()"&gt;M-&lt;/button&gt;
            &lt;button class="clear" onclick="clear_output()"&gt;C&lt;/button&gt;
            &lt;button onclick="append_to_output('7')"&gt;7&lt;/button&gt;
            &lt;button onclick="append_to_output('8')"&gt;8&lt;/button&gt;
            &lt;button onclick="append_to_output('9')"&gt;9&lt;/button&gt;
            &lt;button class="function" onclick="append_to_output('*')"&gt;*&lt;/button&gt;
            &lt;button onclick="append_to_output('4')"&gt;4&lt;/button&gt;
            &lt;button onclick="append_to_output('5')"&gt;5&lt;/button&gt;
            &lt;button onclick="append_to_output('6')"&gt;6&lt;/button&gt;
            &lt;button class="function" onclick="append_to_output('+')"&gt;+&lt;/button&gt;
            &lt;button onclick="append_to_output('1')"&gt;1&lt;/button&gt;
            &lt;button onclick="append_to_output('2')"&gt;2&lt;/button&gt;
            &lt;button onclick="append_to_output('3')"&gt;3&lt;/button&gt;
            &lt;button class="function" onclick="append_to_output('-')"&gt;-&lt;/button&gt;
            &lt;button onclick="append_to_output('0')"&gt;0&lt;/button&gt;
            &lt;button onclick="append_to_output('.')"&gt;.&lt;/button&gt;
            &lt;button class="equal" onclick="calculate_result()"&gt;=&lt;/button&gt;
            &lt;button class="function" onclick="append_to_output('/')"&gt;/&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script type="text/python"&gt;
        from browser import document, window

        output = document['output']
        memory = 0
        current_operation = ''
        last_value = ''

        def append_to_output(value):
            if output.text == '0' or output.text == "Error":
                output.text = value
            else:
                output.text += value

        def clear_output():
            global current_operation, last_value
            output.text = '0'
            current_operation = ''
            last_value = ''

        def memory_clear():
            global memory
            memory = 0

        def memory_add():
            global memory
            memory += float(output.text)
            clear_output()

        def memory_subtract():
            global memory
            memory -= float(output.text)
            clear_output()

        def calculate_result():
            global current_operation, last_value
            try:
                result = eval(output.text)
                output.text = str(result)
                last_value = output.text
                current_operation = ''
            except Exception as e:
                output.text = "Error"
                last_value = ''
                current_operation = ''

        # Export functions to be available from JavaScript
        window.append_to_output = append_to_output
        window.clear_output = clear_output
        window.memory_clear = memory_clear
        window.memory_add = memory_add
        window.memory_subtract = memory_subtract
        window.calculate_result = calculate_result
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p><h2>期末報告</h2>
<p><span><a href="https://41046109.github.io/wcm2024/downloads/%E6%9C%9F%E6%9C%AB%E5%A0%B1%E5%91%8A.pdf">簡報的pdf檔</a></span></p>
<p><span>簡報的影片檔:</span></p>
<p><iframe allowfullscreen="allowfullscreen" frameborder="2" height="315" src="https://www.youtube.com/embed/ImJssLcvV0w?si=ZDBkTMNxTG7HqJRv" width="560"></iframe></p>
<h2>五子棋遊戲</h2>
<p><img alt="" height="350" src="/images/遊戲選項.png" width="300"/></p>
<p>程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;遊戲選項&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            padding: 20px;
        }
        h1 {
            font-size: 3em;
            margin-bottom: 20px;
        }
        .menu-item {
            font-size: 1.5em;
            margin: 10px;
            cursor: pointer;
            padding: 10px 20px;
            border: 2px solid #000;
            background-color: #fff;
            text-align: center;
            width: 200px;
            text-decoration: none;
            color: #000;
        }
        .menu-item:hover {
            background-color: #ddd;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;遊戲選項&lt;/h1&gt;
    &lt;a class="menu-item" href="members.html"&gt;成員名單&lt;/a&gt;
    &lt;a class="menu-item" href="purpose.html"&gt;製作目的與目標&lt;/a&gt;
    &lt;a class="menu-item" href="game-options.html"&gt;遊戲選擇&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p>
<h3>成員名單</h3>
<p><img alt="" height="350" src="/images/成員名單.png" width="300"/></p>
<p>程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;成員名單&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        h1 {
            font-size: 3em;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.5em;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1em;
            border: 2px solid #000;
            background-color: #fff;
            cursor: pointer;
            text-decoration: none;
            color: #000;
        }
        .back-button:hover {
            background-color: #ddd;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;成員名單&lt;/h1&gt;
    &lt;p&gt;第八組&lt;/p&gt;
    40823114、40823124&lt;br&gt;
    40823238、41223129&lt;br&gt;
    41046109、41046137&lt;br&gt;
    
    
    &lt;a class="back-button" href="index.html"&gt;返回主菜單&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p>
<h3>製作目的與目標</h3>
<p><img alt="" height="350" src="/images/製作目的與目標.png" width="300"/></p>
<p>程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;製作目的與目標&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        h1 {
            font-size: 3em;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.5em;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1em;
            border: 2px solid #000;
            background-color: #fff;
            cursor: pointer;
            text-decoration: none;
            color: #000;
        }
        .back-button:hover {
            background-color: #ddd;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;製作目的與目標&lt;/h1&gt;
    &lt;p&gt;課堂作業&lt;/p&gt;
    為了期末報告而做出五子棋這個小遊戲。&lt;br&gt;
    可以讓我們更清楚及了解機械系生產產品時會有的問題。&lt;br&gt; 
    &lt;a class="back-button" href="index.html"&gt;返回主菜單&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p>
<h3>遊戲畫面</h3>
<p><img alt="" height="350" src="/images/遊戲畫面.png" width="300"/></p>
<p>程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;五子棋遊戲&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }
        #board {
            display: grid;
            grid-template-columns: repeat(15, 30px);
            grid-template-rows: repeat(15, 30px);
            gap: 0;
            border: 4px solid black;
            background-color: #ffdead;
            position: relative;
        }
        .cell {
            width: 30px;
            height: 30px;
            position: relative;
        }
        .line {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            border: 1px solid black;
        }
        .piece {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        .player {
            background-color: blue;
        }
        .ai {
            background-color: red;
        }
        .scoreboard {
            position: absolute;
            top: -40px;
            display: flex;
            justify-content: space-between;
            width: calc(100% + 40px);
            left: -20px;
        }
        .score {
            font-size: 18px;
            margin: 0 20px;
        }
        @media (max-width: 600px) {
            .cell {
                width: 20px;
                height: 20px;
            }
            .piece {
                width: 15px;
                height: 15px;
            }
            #board {
                grid-template-columns: repeat(15, 20px);
                grid-template-rows: repeat(15, 20px);
            }
        }
        #backButton {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px;
            font-size: 1em;
            cursor: pointer;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;五子棋遊戲&lt;/h1&gt;
    &lt;div id="container"&gt;
        &lt;button id="backButton" onclick="goBack()"&gt;返回選單&lt;/button&gt;
        &lt;div class="scoreboard"&gt;
            &lt;p class="score"&gt;玩家得分: &lt;span id="playerScore"&gt;0&lt;/span&gt;&lt;/p&gt;
            &lt;p class="score"&gt;對手得分: &lt;span id="aiScore"&gt;0&lt;/span&gt;&lt;/p&gt;
        &lt;/div&gt;
        &lt;div id="board"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;button onclick="resetGame()"&gt;重置遊戲&lt;/button&gt;

    &lt;script&gt;
        const board = document.getElementById('board');
        const playerScoreElem = document.getElementById('playerScore');
        const aiScoreElem = document.getElementById('aiScore');

        let boardState = Array(15).fill().map(() =&gt; Array(15).fill(0));
        let playerScore = 0;
        let aiScore = 0;

        function createBoard() {
            board.innerHTML = '';
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    const line = document.createElement('div');
                    line.classList.add('line');
                    cell.appendChild(line);
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    cell.addEventListener('click', playerMove);
                    board.appendChild(cell);
                }
            }
        }

        function playerMove(event) {
            const x = parseInt(event.target.parentElement.dataset.x);
            const y = parseInt(event.target.parentElement.dataset.y);
            if (boardState[y][x] === 0) {
                boardState[y][x] = 1;
                event.target.parentElement.appendChild(createPiece('player'));
                if (checkWinner(1)) {
                    alert('玩家獲勝！');
                    playerScore++;
                    updateScores();
                    resetGame();
                    return;
                }
                setTimeout(aiMove, 500);
            }
        }

        function aiMove() {
            let move = findWinningMove(2) || findWinningMove(1) || findPotentialThreat(2) || findPotentialThreat(1) || findRandomMove();
            if (move) {
                boardState[move.y][move.x] = 2;
                const cell = board.querySelector(`[data-x='${move.x}'][data-y='${move.y}']`);
                cell.appendChild(createPiece('ai'));
                if (checkWinner(2)) {
                    alert('對手獲勝！');
                    aiScore++;
                    updateScores();
                    resetGame();
                    return;
                }
            }
        }

        function findWinningMove(player) {
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        boardState[y][x] = player;
                        if (checkWinner(player)) {
                            boardState[y][x] = 0;
                            return { x, y };
                        }
                        boardState[y][x] = 0;
                    }
                }
            }
            return null;
        }

        function findPotentialThreat(player) {
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        boardState[y][x] = player;
                        if (checkPotentialThreat(player)) {
                            boardState[y][x] = 0;
                            return { x, y };
                        }
                        boardState[y][x] = 0;
                    }
                }
            }
            return null;
        }

        function checkPotentialThreat(player) {
            const directions = [
                { dx: 1, dy: 0 },
                { dx: 0, dy: 1 },
                { dx: 1, dy: 1 },
                { dx: 1, dy: -1 }
            ];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === player) {
                        for (let { dx, dy } of directions) {
                            if (checkThreatDirection(x, y, dx, dy, player)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        function checkThreatDirection(x, y, dx, dy, player) {
            let count = 0;
            for (let i = 0; i &lt; 5; i++) {
                const nx = x + i * dx;
                const ny = y + i * dy;
                if (nx &gt;= 0 &amp;&amp; nx &lt; 15 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 15 &amp;&amp; boardState[ny][nx] === player) {
                    count++;
                } else {
                    break;
                }
            }
            return count &gt;= 3; // Consider a position a threat if there are 3 in a row
        }

        function findRandomMove() {
            let moves = [];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        moves.push({ x, y });
                    }
                }
            }
            return moves.length ? moves[Math.floor(Math.random() * moves.length)] : null;
        }

        function createPiece(playerClass) {
            const piece = document.createElement('div');
            piece.classList.add('piece', playerClass);
            return piece;
        }

        function checkWinner(player) {
            const directions = [
                { dx: 1, dy: 0 },
                { dx: 0, dy: 1 },
                { dx: 1, dy: 1 },
                { dx: 1, dy: -1 }
            ];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === player) {
                        for (let { dx, dy } of directions) {
                            if (checkDirection(x, y, dx, dy, player)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        function checkDirection(x, y, dx, dy, player) {
            let count = 0;
            for (let i = 0; i &lt; 5; i++) {
                const nx = x + i * dx;
                const ny = y + i * dy;
                if (nx &gt;= 0 &amp;&amp; nx &lt; 15 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 15 &amp;&amp; boardState[ny][nx] === player) {
                    count++;
                } else {
                    break;
                }
            }
            return count === 5;
        }

        function updateScores() {
            playerScoreElem.textContent = playerScore;
            aiScoreElem.textContent = aiScore;
        }

        function resetGame() {
            boardState = Array(15).fill().map(() =&gt; Array(15).fill(0));
            createBoard();
        }

        function goBack() {
            window.location.href = 'index.html';
        }

        createBoard();
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p>
<h1>cmsimde</h1>
<h1>分組專案</h1>
<h2>分組專案簡介</h2>
<p><a href="https://mde.tw/wcm2024/blog/wcm-w10-project.html">請參照Blog上內容進行操作</a></p>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p>若要改版，必須確定 home/runner/.ssh 目錄下有 id_rsa 與config</p>
<p>若要Replit 維護分組網站內容，必須要動態設定，.ssh下的 id_rsa與 config</p>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>w10</h1>
<p>建立一個包含以下程式的gist</p>
<p>並且取出其URL: <a href="https://gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py">gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py</a></p>
<p>接著到Brython頁面的網址後加 ?src=URL</p>
<p>就可在<a href="https://40823238.github.io/wcm2024/content/Brython.html?src=https://gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py">頁面</a>中運行程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax
  
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"
  
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
  
      # 依照換行符號拆分資料
      lines = content.split('\n')
  
      # 建立空列表儲存資料
      data = []
  
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
  
        # 依照逗號拆分資料
        items = line.split(',')
  
        # 將拆分後的資料加入列表
        data.append(items)
  
      # 印出結果
      print(data)
    else:
      print("Error:", req.text)
  
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
  
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>git</h1>
<h2>分支和合併的基本用法</h2>
<div class="paragraph">
<p>讓我們來看一個你在現實生活中，有可能會用到的分支（branch）與合併（merge）工作流程的簡單範例， 你做了以下動作：</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>開發一個網站。</p>
</li>
<li>
<p>建立一個分支以實現一個新故事。</p>
</li>
<li>
<p>在這個分支上進行開發。</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>此時你接到一個電話，有個很危急的問題需要緊急修正（hotfix）， 你可以按照下面的方式處理：</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>切換到發佈產品用的分支。</p>
</li>
<li>
<p>在同一個提交上建立一個新分支，在這個分支上修正問題。</p>
</li>
<li>
<p>通過測試後，切回發佈產品用的分支，將修正用的分支合併進來，然後再推送（push）出去以發佈產品。</p>
</li>
<li>
<p>切換到之前實現新需求的分支以繼續工作。</p>
</li>
</ol>
</div>